<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plan de Pruebas API GraphQL">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Grupo de Hilos">
        <intProp name="ThreadGroup.num_threads">1000</intProp>
        <intProp name="ThreadGroup.ramp_time">300</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Bucle">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Create purchase">
          <stringProp name="HTTPSampler.domain">api-graphql-609569711189.southamerica-east1.run.app</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/graphql</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;CreatePurchase&quot;,&quot;variables&quot;:{
  &quot;createPurchaseInput&quot;: {
    &quot;id_status&quot;: &quot;${id_status}&quot;,
    &quot;id_customer&quot;: &quot;${id_customer}&quot;,
    &quot;total_cost&quot;: &quot;${total_cost}&quot;,
    &quot;currency&quot;: &quot;${currency}&quot;,
    &quot;payments&quot;: [
        {
            &quot;id_status&quot;: &quot;${id_statusp1}&quot;,
            &quot;id_payment_method&quot;: &quot;${id_payment_methodp1}&quot;,
            &quot;amount&quot;: &quot;${amountp1}&quot;,
            &quot;currency&quot;: &quot;${currency1}&quot;
        },
        {
		  &quot;id_status&quot;: &quot;${id_statusp2}&quot;,
            &quot;id_payment_method&quot;: &quot;${id_payment_methodp2}&quot;,
            &quot;amount&quot;: &quot;${amountp2}&quot;,
            &quot;currency&quot;: &quot;${currency2}&quot;
        }
    ],
    &quot;purchaseDetail&quot;: [
        {
            &quot;id_product&quot;: &quot;${id_productpd1}&quot;,
            &quot;sale_price&quot;: &quot;${sale_pricepd1}&quot;,
            &quot;quantity&quot;: ${quantitypd1}
        },
        {
            &quot;id_product&quot;: &quot;${id_productpd2}&quot;,
            &quot;sale_price&quot;: &quot;${sale_pricepd2}&quot;,
            &quot;quantity&quot;: ${quantitypd2}
        }
    ]
  }
},&quot;query&quot;:&quot;mutation CreatePurchase($createPurchaseInput: CreatePurchaseInput!) {\n  createPurchase(createPurchaseInput: $createPurchaseInput) {\n    id\n    currency\n    total_cost\n    is_eliminated\n    created_at\n    updated_at\n    id_customer\n    status {\n      id\n      name\n      type\n      is_eliminated\n      created_at\n      updated_at\n    }\n    payments {\n      id\n      currency\n      amount\n      processed_at\n      payment_method {\n        id\n        name\n        description\n        is_eliminated\n        created_at\n        updated_at\n      }\n      status {\n        id\n        name\n        type\n        is_eliminated\n        created_at\n        updated_at\n      }\n    }\n    purchaseDetail {\n      id\n      quantity\n      sale_price\n      is_eliminated\n      created_at\n      updated_at\n      id_product\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="GraphQLHTTPSampler.operationName">CreatePurchase</stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation CreatePurchase($createPurchaseInput: CreatePurchaseInput!) {
  createPurchase(createPurchaseInput: $createPurchaseInput) {
    id
    currency
    total_cost
    is_eliminated
    created_at
    updated_at
    id_customer
    status {
      id
      name
      type
      is_eliminated
      created_at
      updated_at
    }
    payments {
      id
      currency
      amount
      processed_at
      payment_method {
        id
        name
        description
        is_eliminated
        created_at
        updated_at
      }
      status {
        id
        name
        type
        is_eliminated
        created_at
        updated_at
      }
    }
    purchaseDetail {
      id
      quantity
      sale_price
      is_eliminated
      created_at
      updated_at
      id_product
    }
  }
}</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;createPurchaseInput&quot;: {
    &quot;id_status&quot;: &quot;${id_status}&quot;,
    &quot;id_customer&quot;: &quot;${id_customer}&quot;,
    &quot;total_cost&quot;: &quot;${total_cost}&quot;,
    &quot;currency&quot;: &quot;${currency}&quot;,
    &quot;payments&quot;: [
        {
            &quot;id_status&quot;: &quot;${id_statusp1}&quot;,
            &quot;id_payment_method&quot;: &quot;${id_payment_methodp1}&quot;,
            &quot;amount&quot;: &quot;${amountp1}&quot;,
            &quot;currency&quot;: &quot;${currency1}&quot;
        },
        {
		  &quot;id_status&quot;: &quot;${id_statusp2}&quot;,
            &quot;id_payment_method&quot;: &quot;${id_payment_methodp2}&quot;,
            &quot;amount&quot;: &quot;${amountp2}&quot;,
            &quot;currency&quot;: &quot;${currency2}&quot;
        }
    ],
    &quot;purchaseDetail&quot;: [
        {
            &quot;id_product&quot;: &quot;${id_productpd1}&quot;,
            &quot;sale_price&quot;: &quot;${sale_pricepd1}&quot;,
            &quot;quantity&quot;: ${quantitypd1}
        },
        {
            &quot;id_product&quot;: &quot;${id_productpd2}&quot;,
            &quot;sale_price&quot;: &quot;${sale_pricepd2}&quot;,
            &quot;quantity&quot;: ${quantitypd2}
        }
    ]
  }
}</stringProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gestor de Cabecera HTTP" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árbol de Resultados">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="Ver Resultados en Árbol">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"/apache-jmeter-5.6.3/bin/api-tesis/apis-tesis/config-jmeter/api-graphql/purchase/pruebas-api-graphql-purchase-create.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Configuración del CSV Data Set">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/apache-jmeter-5.6.3/bin/api-tesis/apis-tesis/config-jmeter/api-rest/purchase/pruebas-api-rest-purchase-create-data.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">id_status,id_customer,total_cost,currency,id_statusp1,id_payment_methodp1,amountp1,currency1,id_statusp2,id_payment_methodp2,amountp2,currency2,id_productpd1,sale_pricepd1,quantitypd1,id_productpd2,sale_pricepd2,quantitypd2</stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
